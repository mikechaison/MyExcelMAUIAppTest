//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:/Áóðñ³òºò/2_course/ÎÎÏ/MyExcelMAUIApp/DemoParser.Parsing/LabCalculator.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class LabCalculatorLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, NUMBER=2, IDENTIFIER=3, INT=4, EXPONENT=5, MULTIPLY=6, DIVIDE=7, 
		SUBTRACT=8, ADD=9, LPAREN=10, RPAREN=11, INC=12, DEC=13, MAX=14, MIN=15, 
		WS=16;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "NUMBER", "IDENTIFIER", "INT", "EXPONENT", "MULTIPLY", "DIVIDE", 
		"SUBTRACT", "ADD", "LPAREN", "RPAREN", "INC", "DEC", "MAX", "MIN", "WS"
	};


	public LabCalculatorLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LabCalculatorLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "','", null, null, null, "'^'", "'*'", "'/'", "'-'", "'+'", "'('", 
		"')'", "'inc'", "'dec'", "'max'", "'min'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "NUMBER", "IDENTIFIER", "INT", "EXPONENT", "MULTIPLY", "DIVIDE", 
		"SUBTRACT", "ADD", "LPAREN", "RPAREN", "INC", "DEC", "MAX", "MIN", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LabCalculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LabCalculatorLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,16,91,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
		14,2,15,7,15,1,0,1,0,1,1,1,1,1,1,3,1,39,8,1,1,2,4,2,42,8,2,11,2,12,2,43,
		1,2,1,2,5,2,48,8,2,10,2,12,2,51,9,2,1,3,4,3,54,8,3,11,3,12,3,55,1,4,1,
		4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,
		1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,
		1,15,1,15,0,0,16,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
		12,25,13,27,14,29,15,31,16,1,0,4,2,0,65,90,97,122,1,0,49,57,1,0,48,57,
		3,0,9,10,13,13,32,32,94,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
		0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
		1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
		0,0,31,1,0,0,0,1,33,1,0,0,0,3,35,1,0,0,0,5,41,1,0,0,0,7,53,1,0,0,0,9,57,
		1,0,0,0,11,59,1,0,0,0,13,61,1,0,0,0,15,63,1,0,0,0,17,65,1,0,0,0,19,67,
		1,0,0,0,21,69,1,0,0,0,23,71,1,0,0,0,25,75,1,0,0,0,27,79,1,0,0,0,29,83,
		1,0,0,0,31,87,1,0,0,0,33,34,5,44,0,0,34,2,1,0,0,0,35,38,3,7,3,0,36,37,
		5,46,0,0,37,39,3,7,3,0,38,36,1,0,0,0,38,39,1,0,0,0,39,4,1,0,0,0,40,42,
		7,0,0,0,41,40,1,0,0,0,42,43,1,0,0,0,43,41,1,0,0,0,43,44,1,0,0,0,44,45,
		1,0,0,0,45,49,7,1,0,0,46,48,7,2,0,0,47,46,1,0,0,0,48,51,1,0,0,0,49,47,
		1,0,0,0,49,50,1,0,0,0,50,6,1,0,0,0,51,49,1,0,0,0,52,54,2,48,57,0,53,52,
		1,0,0,0,54,55,1,0,0,0,55,53,1,0,0,0,55,56,1,0,0,0,56,8,1,0,0,0,57,58,5,
		94,0,0,58,10,1,0,0,0,59,60,5,42,0,0,60,12,1,0,0,0,61,62,5,47,0,0,62,14,
		1,0,0,0,63,64,5,45,0,0,64,16,1,0,0,0,65,66,5,43,0,0,66,18,1,0,0,0,67,68,
		5,40,0,0,68,20,1,0,0,0,69,70,5,41,0,0,70,22,1,0,0,0,71,72,5,105,0,0,72,
		73,5,110,0,0,73,74,5,99,0,0,74,24,1,0,0,0,75,76,5,100,0,0,76,77,5,101,
		0,0,77,78,5,99,0,0,78,26,1,0,0,0,79,80,5,109,0,0,80,81,5,97,0,0,81,82,
		5,120,0,0,82,28,1,0,0,0,83,84,5,109,0,0,84,85,5,105,0,0,85,86,5,110,0,
		0,86,30,1,0,0,0,87,88,7,3,0,0,88,89,1,0,0,0,89,90,6,15,0,0,90,32,1,0,0,
		0,5,0,38,43,49,55,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
